def summary = manager.createSummary("folder.gif")
summary.appendText("Additional atrifacts:", false)

pipeline {
    options {
        disableConcurrentBuilds()
    }

    agent {
        node {
            label 'cnam'
        }
    }

    environment {
        bob2 = 'env | egrep -v "PATH|GERRIT_REFSPEC" > ${WORKSPACE}/env_var_bob; docker run --rm ' +
                '--env-file ${WORKSPACE}/env_var_bob -v ${WORKSPACE}/.docker/config.json:${HOME}/.docker/config.json ' +
                '-v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:${PWD} ' +
                '--workdir ${PWD} -u ${UID}:${GROUPS} -e HOME=${HOME} ' +
                'armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob.2.0:${BOB2_VERSION}'

        DOCKER_CONFIG = 'CNAMFID_Docker_ARM'
        GERRIT_ID = 'cdbc7c5b-9a86-4074-a15e-3e6558998860'
        BOB2_VERSION = '1.16.0-0'
        SONAR_TOKEN = credentials("cnamfid-sonar-token")
    }

    stages {
        stage('Preperation') {
        steps {
            withCredentials([ file(credentialsId: "${env.DOCKER_CONFIG}", variable: 'DOCKER_ARM_CONFIG') ])
                { writeFile file: './.docker/config.json', text: readFile(DOCKER_ARM_CONFIG) }
            withCredentials([
                  usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                ]) {
                       sh "${bob2} preparation"
                       sh "${bob2} precode_init"
                   }
            }
	}
        stage('Building Java app from source code') {
            steps {
                  sh "${bob2} build"
            }
        }
        stage('Verify app source code with sonar') {
            steps {
                  sh "${bob2} sonar"
            }
        }
        stage('Creating Docker image') {
            steps {
                withCredentials([
                  usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                ]) {
                       sh "${bob2} build-docker"
                   }
            }
        }
        stage('Run container and perform test') {
            steps {
                script {
                    def DOCKER_IMAGE = readFile ".bob/var.dockerimage_artifactory"
                    sh "wget https://arm.sero.gic.ericsson.se/artifactory/proj-eric-lcm-helm-executor-artifacts-generic-local/CI/CSAR/csar-bro-without-plus-0.0.2.csar"
                    sh '''
                        docker build -t ci-git-repo ./local_env/dependencies/git-repo/;
                        docker run --rm -d --env-file ./Docker/CI/ci_env_variables --name ci-git-repo -p 8484:8080 ci-git-repo
                    '''
                    sh 'docker run --rm -d --env-file ./Docker/CI/ci_env_variables --name ci-onboarding -p 8681:8080 -v /etc/ssl/certs/ca-bundle.crt:/var/lib/ca-certificates/ca-bundle.pem ' + DOCKER_IMAGE
                    sh 'sleep 10'
                    sh '''
                        python3 -c "import requests; response = requests.post('http://localhost:8681/cnonb/v1/onboarding', files={'csarArchive': open('csar-bro-without-plus-0.0.2.csar', 'rb')}); print(response.status_code, response.text); exit(1) if response.status_code != 201 else exit(0)"                    '''
                    sh "docker logs ci-onboarding > ci-onboarding.log; docker stop ci-git-repo ci-onboarding"
                   }
            }
            post {
                failure {
                    sh "docker logs ci-onboarding > ci-onboarding.log; docker stop ci-git-repo ci-onboarding"
                }
                always {
                    archiveArtifacts 'ci-onboarding.log'
                 }
            }
        }
        stage('Publish Docker Image') {
            steps {
                 withCredentials([
                   usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                 ]) {
                       sh "${bob2} publish-docker-image"
                    }
            }
            post {
                success {
                    script {
                        def DOCKER_IMAGE = readFile ".bob/var.dockerimage_artifactory"
                        summary.appendText("<li><b>Docker image: </b>docker pull ${DOCKER_IMAGE}</li>", false)
                    }
                }
            }
        }
        stage('Drop stage') {
            steps {
                script {
                     withCredentials([
                       usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                     ]) {
                         if (params.DROP == true) {
                            sh "${bob2} drop-actions"
                         }
                        }
                }
            }

        }
    }
    post {
         always {
                 cleanWs()
         }
    }
}
