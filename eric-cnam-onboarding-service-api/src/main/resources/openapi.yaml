#
# COPYRIGHT Ericsson 2023
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

openapi: 3.0.3
info:
  version: 0.0.1
  title: Onboarding
  description:
    "<p>This service will accept CSAR files, unpack it and push to OCI.
    The result is one or more archives with helmfile/charts.</p>
    <p>Also this service will accept additional values files and push it to Git Repo.
    The result is saved on Git Repo values files.</p>
    <p>Service will return links and Ids to stored files</p>"

servers:
  - url: /cnonb/v1

components:
  schemas:
    ProblemDetails:
      required:
        - detail
        - status
      type: object
      properties:
        type:
          description: |
            A URI reference according to IETF RFC 3986 [5] that identifies the problem type.
            It is encouraged that the URI provides human-readable documentation for the problem (e.g. using HTML) when dereferenced.
            When this member is not present, its value is assumed to be "about:blank".
          type: string
        title:
          type: string
          description: |
            A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
            except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
            A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem,
            except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).
        status:
          type: integer
          description: |
            The HTTP status code for this occurrence of the problem. The HTTP status code ([RFC7231], Section 6) generated by the origin
            server for this occurrence of the problem.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem. It may yield further information if dereferenced.
      description: |
        The definition of the general "ProblemDetails" data structure from IETF RFC 7807 [19] is reproduced in this structure.
        Compared to the general framework defined in IETF RFC 7807 [19], the "status" and "detail" attributes are mandated to be included
        by the present document, to ensure that the response contains additional textual information about an error. IETF RFC 7807 [19]
        foresees extensibility of the "ProblemDetails" type. It is possible that particular APIs in the present document, or particular
        implementations, define extensions to define additional attributes that provide more information about the error. The description
        column only provides some explanation of the meaning to Facilitate understanding of the design. For a full description,
        see IETF RFC 7807 [19].

    WorkloadInstancePostRequestDto:
      type: object
      description: WorkloadInstancePostRequestDto is a request, where user set parameters to describe workload instance.
      required:
        - workloadInstanceName
        - namespace
        - helmSourceUrl
      properties:
        workloadInstanceName:
          type: string
          description: Name of the workloadInstance. This value must be unique for each workloadInstance
        namespace:
          type: string
          description: Namespace where workloadInstance will be installed.
        crdNamespace:
          type: string
          description: Namespace where CRD charts will be installed.
        timeout:
          type: integer
        helmSourceUrl:
          type: string
          description: Link to OCI registry which can contain helmfile, integration charts and images
        additionalParameters:
          type: object
          description:
            This type represents a list of key-value pairs. The order of
            the pairs in the list is not significant. In JSON, a set of
            key- value pairs is represented as an object. It shall comply
            with the provisions defined in clause 4 of IETF RFC 7159.
          additionalProperties:
            type: object

    WorkloadInstancePutRequestDto:
      type: object
      description: WorkloadInstancePutRequestDto is the object used for update workloadInstance
      required:
        - workloadInstanceName
      properties:
        workloadInstanceName:
          type: string
          description: Name of the workloadInstance. This value must be unique for each workloadInstance
        helmSourceUrl:
          type: string
          description: Link to OCI registry which can contain helmfile, integration charts
        additionalParameters:
          type: object
          description:
            This type represents a list of key-value pairs. The order of
            the pairs in the list is not significant. In JSON, a set of
            key- value pairs is represented as an object. It shall comply
            with the provisions defined in clause 4 of IETF RFC 7159.
          additionalProperties:
            type: object

    WorkloadInstanceResponseDto:
      type: object
      description: WorkloadInstanceResponseDto returns url to Git Repo created workload instance
      required:
        - url
      properties:
        url:
          type: string
          description: |
            URL to the Git Repo created workload instance

    CsarOnboardingResponseDto:
      type: object
      description: CsarOnboardingResponseDto returns a tag id and url to saved helm source
      required:
        - helmfileUrl
        - helmChartUrls
      properties:
        helmfileUrl:
          type: string
          description: |
            URL to the saved helmfile.
        helmChartUrls:
          type: array
          items:
            type: string
          description: List of URLs to the saved helm charts.

  responses:
    Accepted:
      description: |
        Accepted
        The request was accepted for processing, but the  processing has not been completed. The response body shall be empty.
        The HTTP response shall include a "Location" HTTP header that contains the URI of the newly-created "CNW LCM operation occurrence"
        resource corresponding to the operation.
      headers:
        Location:
          description: The resource URI to the operation to track the progress
          schema:
            type: string
            format: url
      content: { }
    NoContent:
      description: |
        NoContent.

        The request has succeeded, but that the client doesn't need to navigate away from its current page.
      headers:
        Location:
          description: The resource URI to the operation to track the progress
          schema:
            type: string
            format: url
      content: { }
    BadRequest:
      description: |
        Bad Request If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or
        the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. --- If the
        response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected,
        and the API producer does not support paging for the affected resource, it shall respond with this response code. --- If there is an
        application error related to the client's input that cannot be easily mapped to any other HTTP response code ("catch all error"), the API
        producer shall respond with this response code.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    BasicOk:
      description: |
        OK.

        The request has succeeded.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content: { }
    Conflict:
      description: |
        Conflict Another request is in progress that prohibits the fulfilment of the current request, or the
        current resource state is inconsistent with the request.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    Forbidden:
      description: |
        Forbidden If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond
        with this response code. The "ProblemDetails" structure shall be provided.  It should include in the "detail" attribute information about
        the source of the problem, and may indicate how to solve it.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    InternalServerError:
      description: |
        Internal Server Error If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP
        response code ("catch all error"), the API producer shall respond withthis response code. The "ProblemDetails" structure shall be provided,
        and shall include in the "detail" attribute more information about the source of the problem.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    MethodNotAllowed:
      description: |
        Method Not Allowed If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this
        response code. The "ProblemDetails" structure may be omitted.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NotAcceptable:
      description: |
        Not Acceptable If the "Accept" HTTP header does not contain at least one name of a content type that is acceptable to the API producer,
        the API producer shall respond with this response code. The "ProblemDetails" structure may be omitted in that case.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NotFound:
      description: |
        Not Found If the API producer did not find a current representation for the resource addressed by the URI passed in the request, or is not
        willing to disclose that one exists, it shall respond with this response code.  The "ProblemDetails" structure may be provided, including
        in the "detail" attribute information about the source of the problem, e.g. a wrong resource URI variable.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    RequestedRangeNotSatisfiable:
      description: |
        Requested Range Not Satisfiable This code is returned if the requested byte range in the Range HTTP header is not
        present in the requested resource.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ServiceUnavailable:
      description: |
        Service Unavailable If the API producer encounters an internal overload situation of itself or of a system it relies on, it should
        respond with this response code, following the provisions in IETF RFC 7231 [13] for the use of the "Retry-After" HTTP header and for the
        alternative to refuse the connection. The "ProblemDetails" structure may be omitted.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    Unauthorized:
      description: |
        Unauthorized If the request contains no access token even though one is required, or if the request contains an authorization token that
        is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in
        the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    UnprocessableEntity:
      description: |
        Unprocessable Entity If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot
        be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The
        "ProblemDetails" structure shall be provided, and should include in the "detail" attribute more information about the source of the problem.
        NOTE 2: This error response code is only applicable for methods that have a request body.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    WorkloadInstanceCreated:
      description: |
        Accepted.

        Workload Instance creation was accepted.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/WorkloadInstanceResponseDto'

    WorkloadInstanceUpdated:
      description: |
        Accepted.

        Workload Instance update was accepted.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/WorkloadInstanceResponseDto'

    CsarOnboardingCreated:
      description: |
        Created.
        
        CSAR archive onboarding was created.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/CsarOnboardingResponseDto'

paths:
  '/health':
    get:
      description: Test endpoint to generate a health response
      tags:
        - Health
      responses:
        '200':
          $ref: '#/components/responses/BasicOk'

  '/workload_instances':
    post:
      description: |
        Create a Workload instance.

        The POST method create a Workload instance. The request must include workloadInstancePostRequestDto and must include helmfile url,
        values.yaml and kube.config. All this data are pushed in GitRepo to separate folder, user will get the link to this folder in a response.
      tags:
        - Workload Instance
      requestBody:
        description: Parameters for the Workload creation.
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                workloadInstancePostRequestDto:
                  description: Object with details required to instantiate workload instance.
                  type: '#/WorkloadInstancePostRequestDto'
                values:
                  description: Values file that provides properties for helmSource.
                  type: string
                  format: binary
                clusterConnectionInfo:
                  description: File with cluster connection info.
                  type: string
                  format: binary
              required:
                - workloadInstancePostRequestDto
                - clusterConnectionInfo
      responses:
        '201':
          $ref: '#/components/responses/WorkloadInstanceCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    put:
      description: |
        Update Workload instance.

        The PUT method updates a Workload instance. The request can include workloadInstancePutRequestDto, values.yaml 

      tags:
        - Workload Instance
      requestBody:
        description: Parameters for the workload instance updating.
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                workloadInstancePutRequestDto:
                  description: Object with details required to instantiate workload instance.
                  type: '#/WorkloadInstancePutRequestDto'
                values:
                  description: Values file that provides properties for helmSource.
                  type: string
                  format: binary
              required:
                - workloadInstancePutRequestDto
      responses:
        '202':
          $ref: '#/components/responses/WorkloadInstanceUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  '/onboarding':
    post:
      description: |
        Onboarding CSAR acrhive.
        
        The POST method onboarding CSAR archive. The request must contain CSAR archive. This archive will be unpacked 
        and all helm sources will be saved to OCI registry. User will get generated tag id and url to the helm source.
      tags:
        - CSAR
      requestBody:
        description: Must contain a CSAR archive to unpack.
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                csarArchive:
                  description: CSAR archive to be unpacked.
                  type: string
                  format: binary
              required:
                - csarArchive
      responses:
        '201':
          $ref: '#/components/responses/CsarOnboardingCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'